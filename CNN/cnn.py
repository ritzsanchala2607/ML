# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kTVVT-DFP9XQX_8IgtJ0GHtGkuTUlFUN
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import keras
from keras.datasets import fashion_mnist

(train_x,train_y),(test_x,test_y)=fashion_mnist.load_data()

plt.imshow(train_x[10])

train_y[10]

print(train_x.shape)
print(train_y.shape)
print(test_x.shape)
print(test_y.shape)

#Preprocessing
train_x=train_x.reshape(-1,28,28,1)
test_x=train_x.reshape(-1,28,28,1)

train_x=train_x.astype('float32')
test_x=test_x.astype('float32')

train_x=train_x/255
test_x=test_x/255

from keras.utils import to_categorical
train_y_one_hot=to_categorical(train_y)
test_y_one_hot=to_categorical(test_y)

print(train_y[10])
print(train_y_one_hot[10])

#model building

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Conv2D,Activation,Flatten,Dropout

from sklearn.model_selection import train_test_split
train_x,valid_x,train_labels,vaild_lables=train_test_split(train_x,train_y_one_hot,test_size=0.20)

from keras.layers import MaxPooling2D,LeakyReLU

#Model Design
model=tf.keras.Sequential()

#hidden layer 1
model.add(tf.keras.layers.Conv2D(32,(3,3),activation='linear',input_shape=(28,28,1),padding='same'))
model.add(tf.keras.layers.LeakyReLU(alpha=0.1))
model.add(tf.keras.layers.MaxPooling2D((2,2)))

#hidden layer 3
model.add(tf.keras.layers.Conv2D(32,(3,3),activation='linear',padding='same'))
model.add(tf.keras.layers.LeakyReLU(alpha=0.1))
model.add(tf.keras.layers.MaxPooling2D((2,2)))

model.add(tf.keras.layers.Flatten())

#output_layer
model.add(tf.keras.layers.Dense(128,activation='linear'))
model.add(tf.keras.layers.LeakyReLU(alpha=0.1))
model.add(tf.keras.layers.Dense(10,activation='softmax'))

model.compile(loss=tf.keras.losses.categorical_crossentropy,optimizer=tf.keras.optimizers.Adam(),metrics=['accuracy'])

model.summary()

model.fit(train_x,train_label,batch_size=64,epochs=20,validation_data=(valid_x,valid_label))